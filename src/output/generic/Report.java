package output.generic;

import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import org.apache.log4j.Logger;
import org.apache.pdfbox.exceptions.COSVisitorException;

import output.pdf.PDFBuilder;
import tools.Tools_System;
import tools.graphics.Tools_Image;
import ui.PropertyLoader;

/*
 * 
 * General class that holds
 * text, table and image data
 * 
 * NOTE: pdf output still a 'work in progress'
 * 
 */

public class Report {
	
	private int outtype=0;
	public static int OUT_PDF = 1;
	public static int OUT_TEXT= 2;
	public static int OUT_HTML = 3;
	boolean straightout;
	PDFBuilder builder;
	File out;
	BufferedWriter writer; 
	String newline;
	Logger logger = Logger.getRootLogger();
	private String defaultHeader = "<head><title>Generic HTML Document Automatically Generated By Eddie"+PropertyLoader.getFullVersion()+"</title></head>";
	private boolean paragraphStart;
	private boolean addParagraphEnd;
	private File directory;
	private int imgcount;
	private static String reportimg = "eddie_rep_";
	
	public Report(){
		newline = Tools_System.getNewline();
	}
	
	
	public boolean setFileAndType(String filepath, int i){
		this.out = new File(filepath);
		this.outtype = i;
		if(i == OUT_PDF){
			try{
				this.builder = new PDFBuilder();
				return true;
			}
			catch(IOException io){
				logger.error("Failed to initialise PDFBuilder", io);
				return false;
			}
		}
		else{
			try{
				directory = this.out.getParentFile();
				if(!directory.canWrite()) {
					logger.error("Cannot write to "+out.getPath()+" file's parent directory!");
					return false;
				}
				FileWriter fstream = new FileWriter(filepath);
				writer = new BufferedWriter(fstream);
				if(i == OUT_HTML){
					writer.write("<HTML>"+defaultHeader);
				}
				return true;
			}
			catch(IOException io){
				logger.error("Failed to initialise FileOutputStream", io);
				return false;
			}
		}
	}
	
	public boolean addImage(BufferedImage img){
		if(outtype == OUT_TEXT || outtype == OUT_HTML) {
			File file = new File(directory.getPath()+reportimg+imgcount+".png");
			while(file.exists())file = new File(directory.getPath()+reportimg+(imgcount++)+".png");
			Tools_Image.image2File(file, img, "png");
			if(outtype == OUT_TEXT){
				try{
					writer.write(newline+"SEE IMAGE FILE: "+file.getName()+newline);
					writer.flush();
					addParagraphEnd=false;
					return true;
				}
				catch(IOException io){
					logger.error("Failed to write to File", io);
					return false;
				}
			}
			else{
				try{
					String s = "<img src=\""+file.getName()+"\" width=\"100%\" />";
					if(this.paragraphStart){
						s = "</p>"+s;
					}
					addParagraphEnd = false;
					writer.write(s);
					writer.flush();
					return true;
				}
				catch(IOException io){
					logger.error("Failed to write to File", io);
					return false;
				}
			}
		}
		else if(outtype == OUT_PDF){
			try{
				builder.drawBufferedImage(img);
				return true;
			}
			catch(IOException io){
				logger.error("Failed to add File to PDF", io);
				return false;
			}
		}
		else{
			logger.error("Report Output type has not been set, data is not being saved!");
			return false;
		}
	}

	public boolean addLine(String s){
		if(outtype == OUT_TEXT){
			try{
				if(!paragraphStart){
					s = newline+s;
					paragraphStart=true;
					addParagraphEnd=true;
				}
				writer.write(s+newline);
				writer.flush();
				return true;
			}
			catch(IOException io){
				logger.error("Failed to write to File", io);
				return false;
			}
		}
		else if(outtype == OUT_HTML){
			try{
				if(!paragraphStart){
					s = addParagraphEnd ? "</p><p>"+s : "<p>"+s;
					paragraphStart=true;
					addParagraphEnd=true;
				}
				writer.write(s+"<BR>");
				writer.flush();
				return true;
			}
			catch(IOException io){
				logger.error("Failed to write to File", io);
				return false;
			}
		}
		else{
			try{
				if(!paragraphStart){
					builder.paragraph();
					paragraphStart=true;
				}
				builder.writeLines(s);
				return true;
			}
			catch(IOException io){
				logger.error("Failed to write to PDF", io);
				return false;
			}
		}
	}
	
	
	/*
	 * Add each line, separated by line breaks
	 * into one single paragraph
	 */
	
	public void addAsOneParagraph(String[] lines){
		paragraphStart = false;
		for(String s : lines){
			addLine(s);
		}
		paragraphStart = false;
	}
	
	/*
	 * Adds each string as a new paragraph,
	 * no line breaks are added
	 */
	
	public void addParagraphs(String[] paragraphs){
		for(String s : paragraphs){
			paragraphStart = false;
			addLine(s);
			paragraphStart = false;
		}
	}
	
	public boolean saveAndClose(){
		if(outtype == OUT_TEXT || outtype == OUT_HTML){
			try{
				writer.close();
				return true;
			}
			catch(IOException io){
				logger.error("Failed to close",io);
				return false;
			}
		}
		if(outtype == OUT_PDF){
			try {
				builder.save(this.out.getPath());
				return true;
			} 
			catch (COSVisitorException e) {
				logger.error("Failed to save due to COSVisitorExcpetion" , e);
				return false;
			}
			catch (IOException e) {
				logger.error("Failed to save due to IOException" ,e);
				return false;
			}
		}
		return false;
	}
	
	public void setDefaultHTMLHeader(String s){
		if(s.toLowerCase().contains("<head>")){
			this.defaultHeader = s;
		}
		else{
			this.defaultHeader = "<head>"+s+"</head>";
		}
	}
}
