package enderdom.eddie.bio.assembly;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import org.apache.log4j.Logger;

import enderdom.eddie.bio.sequence.BasicRegion;
import enderdom.eddie.bio.sequence.Contig;
import enderdom.eddie.tools.Tools_String;
import enderdom.eddie.tools.Tools_System;
import enderdom.eddie.tools.bio.Tools_Fasta;
import enderdom.eddie.ui.EddiePropertyLoader;

public class ACEWriter {
	
	final String newline = Tools_System.getNewline();
	final static String acedateformat = "EEE MMM HH:mm:ss yyyy";
	boolean writeDS = true;
	boolean writeCT = true; 
	private static int acebase = 1;
	private static int linelength = 60;
	
	public ACEWriter(){
		
	}
	
	public void save(BasicContigList list, File f) throws IOException {
		Logger logger = Logger.getRootLogger();
		logger.info("Writing to File at "+f.getPath());
		
		FileWriter fstream = new FileWriter(f);
		BufferedWriter out = new BufferedWriter(fstream);
		
		//Write AS header
		System.out.print("Writing");
		int c =0;
		out.write(getASHeader(list));
		out.flush();
		//Loop Through Contigs	
		for(String name : list.getContigNames()){
			out.write(getCOHeader(list.getContig(name)));
			out.write(Tools_String.splitintolines(linelength, list.getContig(name).getConsensus().getSequence()));
			out.write(newline);
			out.flush();
			out.write("BQ ");
			out.write(newline);
			out.write(Tools_Fasta.Fastq2QualwNewline4ACE(list.getContig(name).getConsensus().getQuality(), linelength));
			out.write(newline);
			out.write(newline);
			out.flush();
			//Loop Through Reads
			for(String read : list.getContig(name).getReadNames()){
				out.write(getAFHeader(read, name, list));
				out.flush();
			}
			for(BasicRegion r : list.getContig(name).getRegions()){
				out.write(getBSHeader(r));
				out.flush();
			}
			for(String read : list.getContig(name).getReadNames()){
				out.write(newline);
				out.write(getRDHeader(read, name, list));
				out.write(Tools_String.splitintolines(linelength, list.getContig(name).getSequence(read).getSequence()));
				out.write(newline);
				out.flush();
				out.write(getQAHeader(read, name, list));
				out.flush();
				if(writeDS){
					out.write(getDSHeader());
					out.flush();
				}
				out.write(newline);
			}
			if(writeCT){
				out.write(getCTHeader());
				out.flush();
			}
			c++;
			if(c%100==0)System.out.print(".");
		}
		System.out.println();
		logger.info("File written.");
		out.flush();
		out.close();
		
	}

	private String getCTHeader() {
		StringBuffer buffer = new StringBuffer();
		buffer.append("CT{");
		buffer.append(newline);
		buffer.append("Output generated by Eddie v"+EddiePropertyLoader.getFullVersion()+" see https://github.com/EnderDom/Eddie" );
		buffer.append(newline);
		buffer.append("}");
		buffer.append(newline);
		buffer.append(newline);
		return buffer.toString();
	}

	private String getDSHeader() {
		StringBuffer buffer = new StringBuffer();
		buffer.append("DS VERSION: 1 TIME: ");
		buffer.append(Tools_System.getDateNow(acedateformat));
		buffer.append(newline);
		return buffer.toString();
	}

	private String getQAHeader(String read, String name,
			BasicContigList list) {
		StringBuffer buffer = new StringBuffer();
		buffer.append("QA " );
		int[] range = list.getContig(name).getRange(read, acebase);
		buffer.append(range[0]);
		buffer.append(" ");
		buffer.append(range[1]);
		range = list.getContig(name).getPaddedRange(read, acebase);
		buffer.append(" ");
		buffer.append(range[0]);
		buffer.append(" ");
		buffer.append(range[1]);
		buffer.append(newline);
		return buffer.toString();
	}

	private String getRDHeader(String read, String name,
			BasicContigList list) {
		StringBuffer buffer =  new StringBuffer();
		buffer.append("RD ");
		buffer.append(read);
		buffer.append( " ");
		buffer.append(list.getContig(name).getSequence(read).getLength());
		buffer.append(" 0 0");
		buffer.append(newline);
		return buffer.toString();
	}

	private  String getBSHeader(BasicRegion r) {
		StringBuffer buffer =  new StringBuffer();
		buffer.append("BS ");
		buffer.append(r.getStart(1));
		buffer.append(" ");
		buffer.append(r.getStop(1));
		buffer.append(" ");
		buffer.append(r.getName());
		buffer.append(newline);
		return buffer.toString();
	}

	private String getAFHeader(String read, String name,
			BasicContigList list) {
		StringBuffer buffer = new StringBuffer();
		buffer.append("AF ");
		buffer.append(read);
		buffer.append(" " );
		buffer.append(list.getContig(name).getCompliment(read));
		buffer.append(" " );
		buffer.append(list.getContig(name).getOffset(read, acebase));
		buffer.append(newline);
		return buffer.toString();
	}

	private String getCOHeader(Contig contig) {
		StringBuffer buffer = new StringBuffer();
		buffer.append("CO ");
		buffer.append(contig.getContigName());
		buffer.append(" "+contig.getConsensus().getLength());
		buffer.append(" "+contig.getNoOfSequences());
		buffer.append(" "+contig.getRegions().size());
		buffer.append(" " + contig.getConsensusCompliment());
		buffer.append(newline);
		return buffer.toString();
	}

	private String getASHeader(BasicContigList list) {
		StringBuffer buffer = new StringBuffer();
		buffer.append("AS ");
		buffer.append(list.getNoOfContigs());
		buffer.append(" ");
		buffer.append(list.getNoOfReads());
		buffer.append(newline);
		buffer.append(newline);
		return buffer.toString();
	}

	
	public boolean isWriteDS() {
		return writeDS;
	}

	public void setWriteDS(boolean writeDS) {
		this.writeDS = writeDS;
	}

	public boolean isWriteCT() {
		return writeCT;
	}

	public void setWriteCT(boolean writeCT) {
		this.writeCT = writeCT;
	}

	
}
