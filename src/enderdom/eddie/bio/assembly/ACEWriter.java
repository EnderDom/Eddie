package enderdom.eddie.bio.assembly;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import org.apache.log4j.Logger;

import enderdom.eddie.bio.sequence.BasicRegion;
import enderdom.eddie.bio.sequence.Contig;
import enderdom.eddie.tools.Tools_String;
import enderdom.eddie.tools.Tools_System;
import enderdom.eddie.tools.bio.Tools_Fasta;
import enderdom.eddie.ui.EddiePropertyLoader;

public class ACEWriter {
	
	String newline;
	public String acedateformat = "EEE MMM HH:mm:ss yyyy";
	final private String date;
	private boolean writeDS = true;
	private boolean writeCT = true; 
	private static int acebase = 1;
	private int linelength = 60;
	private int perc;
	private int count;
	private String written;
	private int size;
	private int readcount;
	
	
	public ACEWriter(){
		date = Tools_System.getDateNow(acedateformat);
		newline = Tools_System.getNewline();
		count=-1;
		perc=0;
		readcount=0;
	}
	
	public void save(BasicContigList list, File f) throws IOException {
		Logger logger = Logger.getRootLogger();
		logger.info("Writing to File at "+f.getPath());
		System.out.println();
		System.out.println("You may want to go make a cup of tea...");
		System.out.println();
		FileWriter fstream = new FileWriter(f);
		BufferedWriter out = new BufferedWriter(fstream);
		
		//Write AS header
		size = list.getNoOfReads();
		out.write(getASHeader(list));
		//Loop Through Contigs	
		for(String name : list.getContigNames()){
			out.write(getCOHeader(list.getContig(name)));
			Tools_String.splitintolinesandsave(linelength, list.getContig(name).getConsensus().getSequence(), out);
			out.write(newline);
			out.write("BQ ");
			out.write(newline);
			out.write(Tools_Fasta.Fastq2QualwNewline4ACE(list.getContig(name).getConsensus().getQuality(), linelength));
			out.write(newline);
			out.write(newline);
			//Loop Through Reads
			for(String read : list.getContig(name).getReadNames()){
				out.write(getAFHeader(read, name, list));
			}
			for(BasicRegion r : list.getContig(name).getRegions()){
				out.write(getBSHeader(r));
			}
			for(String read : list.getContig(name).getReadNames()){
				out.write(newline);
				out.write(getRDHeader(read, name, list));
				Tools_String.splitintolinesandsave(linelength, list.getContig(name).getSequence(read).getSequence(), out);
				out.write(newline);
				out.write(getQAHeader(read, name, list));
				if(writeDS){
					out.write(getDSHeader());
				}
				out.write(newline);
				readcount++;
				if(readcount%25 == 0)writeUpdate();
			}
			if(writeCT){
				out.write(getCTHeader());
			}
			writeUpdate();
		}
		System.out.println("\r100% written");
		logger.info("File written.");
		out.flush();
		out.close();
		
	}
	
	private void writeUpdate(){
		perc = (int)((double)readcount/size*100);
		count++;
		switch(count){
			case 0: written="% written -  "; break;
			case 1: written="% written \\  "; break;
			case 2: written="% written |  "; break;
			case 3: written="% written /  "; break;
			default:count=-1;
		}
		System.out.print("\r"+perc + written);
	}

	private String getCTHeader() {
		StringBuffer buffer = new StringBuffer();
		buffer.append("CT{");
		buffer.append(newline);
		buffer.append("Output generated by Eddie v"+EddiePropertyLoader.getFullVersion()+" see https://github.com/EnderDom/Eddie" );
		buffer.append(newline);
		buffer.append("}");
		buffer.append(newline);
		buffer.append(newline);
		return buffer.toString();
	}

	private String getDSHeader() {
		StringBuffer buffer = new StringBuffer();
		buffer.append("DS VERSION: 1 TIME: ");
		buffer.append(date);
		buffer.append(newline);
		return buffer.toString();
	}

	private String getQAHeader(String read, String name,
			BasicContigList list) {
		StringBuffer buffer = new StringBuffer();
		buffer.append("QA " );
		int[] range = list.getContig(name).getRange(read, acebase);
		buffer.append(range[0]);
		buffer.append(" ");
		buffer.append(range[1]);
		range = list.getContig(name).getPaddedRange(read, acebase);
		buffer.append(" ");
		buffer.append(range[0]);
		buffer.append(" ");
		buffer.append(range[1]);
		buffer.append(newline);
		return buffer.toString();
	}

	private String getRDHeader(String read, String name,
			BasicContigList list) {
		StringBuffer buffer =  new StringBuffer();
		buffer.append("RD ");
		buffer.append(read);
		buffer.append( " ");
		buffer.append(list.getContig(name).getSequence(read).getLength());
		buffer.append(" 0 0");
		buffer.append(newline);
		return buffer.toString();
	}

	private  String getBSHeader(BasicRegion r) {
		StringBuffer buffer =  new StringBuffer();
		buffer.append("BS ");
		buffer.append(r.getStart(1));
		buffer.append(" ");
		buffer.append(r.getStop(1));
		buffer.append(" ");
		buffer.append(r.getName());
		buffer.append(newline);
		return buffer.toString();
	}

	private String getAFHeader(String read, String name,
			BasicContigList list) {
		StringBuffer buffer = new StringBuffer();
		buffer.append("AF ");
		buffer.append(read);
		buffer.append(" " );
		buffer.append(list.getContig(name).getCompliment(read));
		buffer.append(" " );
		buffer.append(list.getContig(name).getOffset(read, acebase));
		buffer.append(newline);
		return buffer.toString();
	}

	private String getCOHeader(Contig contig) {
		StringBuffer buffer = new StringBuffer();
		buffer.append("CO ");
		buffer.append(contig.getContigName());
		buffer.append(" "+contig.getConsensus().getLength());
		buffer.append(" "+contig.getNoOfSequences());
		buffer.append(" "+contig.getRegions().size());
		buffer.append(" " + contig.getConsensusCompliment());
		buffer.append(newline);
		return buffer.toString();
	}

	private String getASHeader(BasicContigList list) {
		StringBuffer buffer = new StringBuffer();
		buffer.append("AS ");
		buffer.append(list.getNoOfContigs());
		buffer.append(" ");
		buffer.append(list.getNoOfReads());
		buffer.append(newline);
		buffer.append(newline);
		return buffer.toString();
	}

	
	public boolean isWriteDS() {
		return writeDS;
	}

	public void setWriteDS(boolean writeDS) {
		this.writeDS = writeDS;
	}

	public boolean isWriteCT() {
		return writeCT;
	}

	public void setWriteCT(boolean writeCT) {
		this.writeCT = writeCT;
	}

	public int getLinelength() {
		return linelength;
	}

	public void setLinelength(int linelength) {
		this.linelength = linelength;
	}
	
}
